/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package librarymanagement.view;

import java.util.List;
import javax.swing.table.DefaultTableModel;
import librarymanagement.alert.AlertMessage;
import librarymanagement.commmonUiMethods.CommandUIMethods;
import librarymanagement.contoller.CategoryController;
import librarymanagement.contoller.MemberController;
import librarymanagement.contoller.UserController;
import librarymanagement.dto.BookCategoryDto;
import librarymanagement.dto.MemberDto;
import librarymanagement.dto.UserDto;
import librarymanagement.enumContainer.EnumContainer;

/**
 *
 * @author ayesh
 */
public class CategoryView extends javax.swing.JPanel {

    /**
     * Creates new form CategoryView
     */
    
    private int selectCategoryserial =0;
    private String selectCategoryId  ="";
    public CategoryView() {
        initComponents();
        loadItemTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        txtf_name = new javax.swing.JTextField();
        btn_save = new javax.swing.JButton();
        btn_update = new javax.swing.JButton();
        btn_delete = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jt_viewcategory = new javax.swing.JTable();

        jPanel1.setBackground(new java.awt.Color(204, 255, 255));

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Ctegory");

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel2.setText("Category Name ");

        btn_save.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btn_save.setText("Save");
        btn_save.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_saveActionPerformed(evt);
            }
        });

        btn_update.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btn_update.setText("Update");
        btn_update.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_updateActionPerformed(evt);
            }
        });

        btn_delete.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btn_delete.setText("Delete");
        btn_delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_deleteActionPerformed(evt);
            }
        });

        jt_viewcategory.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jt_viewcategory.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                jt_viewcategoryAncestorAdded(evt);
            }
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });
        jt_viewcategory.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jt_viewcategoryMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jt_viewcategory);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 553, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                .addGap(46, 46, 46)
                                .addComponent(jLabel2)
                                .addGap(18, 18, 18)
                                .addComponent(txtf_name, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(btn_save, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btn_update, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btn_delete, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 53, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(25, 25, 25)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtf_name, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btn_save)
                    .addComponent(btn_update)
                    .addComponent(btn_delete))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 212, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btn_saveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_saveActionPerformed
        // TODO add your handling code here:
        saveCategory();
    }//GEN-LAST:event_btn_saveActionPerformed

    private void btn_updateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_updateActionPerformed
        // TODO add your handling code here:
        updateCategory();
    }//GEN-LAST:event_btn_updateActionPerformed

    private void jt_viewcategoryAncestorAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_jt_viewcategoryAncestorAdded
        // TODO add your handling code here:
    }//GEN-LAST:event_jt_viewcategoryAncestorAdded

    private void jt_viewcategoryMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jt_viewcategoryMouseClicked
        // TODO add your handling code here:
        selectItemFromTable();
        
    }//GEN-LAST:event_jt_viewcategoryMouseClicked

    private void btn_deleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_deleteActionPerformed
        // TODO add your handling code here:
        deleteCategory();
    }//GEN-LAST:event_btn_deleteActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_delete;
    private javax.swing.JButton btn_save;
    private javax.swing.JButton btn_update;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jt_viewcategory;
    private javax.swing.JTextField txtf_name;
    // End of variables declaration//GEN-END:variables

    private void loadItemTable() {
   
         try {
            
            String column[] = {"Serial no","Category Id"," Name"};
            
            DefaultTableModel dta = new DefaultTableModel(column,0){
            
                @Override
                public boolean isCellEditable(int row, int column){
                
                    return false;
                }
            };
            
            jt_viewcategory.setModel(dta);
           // int ItemDto
            
            List<BookCategoryDto> categoryList;
            
            categoryList =CategoryController.getInstance().getCategoryList();
            if(categoryList !=null){
             for(BookCategoryDto dto : categoryList){
                 if(dto !=null){
                 
                    
               
                       Object[] rowdata ={dto.getSerialNumber(),dto.getCategoryId(),dto.getCategoryName()};
                
                       dta.addRow(rowdata);
              
               
                 }
            
              
               
            }
            }
            
              
        } catch (Exception e) {
           
                AlertMessage.getInstance().printMessage("Category loadItemTable eror 1"+e.getMessage());
        }
    }

    private void saveCategory() {
        try {
            BookCategoryDto dto = new BookCategoryDto(0, "", txtf_name.getText());
            if(dto !=null){
                    if(CategoryController.getInstance().save(dto).equals(EnumContainer.databaseDateStatus.SUCCESS.getValue())){
                AlertMessage.getInstance().showDialog(this, "new Category added");
                loadItemTable();
                cleanTextField();
            }else{
                   AlertMessage.getInstance().showDialog(this, "failed to add a new Category ");
            }
            }else{
                AlertMessage.getInstance().printMessage("Category  saveCategory empty 1");
            }
            
        } catch (Exception e) {
         
              AlertMessage.getInstance().printMessage("Category  saveCategory eror 1"+e.getMessage());
        }
    }

    private void updateCategory() {
        try {
            
             BookCategoryDto dto = new BookCategoryDto(selectCategoryserial, selectCategoryId, txtf_name.getText());
            if(dto !=null){
                    if(CategoryController.getInstance().update(dto).equals(EnumContainer.databaseDateStatus.SUCCESS.getValue())){
                AlertMessage.getInstance().showDialog(this, "updated Category ");
                loadItemTable();
                cleanTextField();
            }else{
                   AlertMessage.getInstance().showDialog(this, "failed to update");
            }
            }else{
                AlertMessage.getInstance().printMessage("Category  updateCategory empty 1");
            }
            
            
            
        } catch (Exception e) {
            
            AlertMessage.getInstance().printMessage("Category  updateCategory eror 1"+e.getMessage());
        }
    
    }
    
        private void selectItemFromTable() {
    
        try {
            
             String cId = jt_viewcategory.getValueAt(jt_viewcategory.getSelectedRow(), 1).toString();
           // ItemDto itemDto = itemController.getById(itemId);
            
      
            BookCategoryDto bookDto = CategoryController.getInstance().getCategoryById(cId);
          
            if(bookDto !=null){
               
               selectCategoryserial =bookDto.getSerialNumber();
               selectCategoryId     =bookDto.getCategoryId();
               
                txtf_name.setText(bookDto.getCategoryName());
             
                
            }else{
            AlertMessage.getInstance().showDialog(this, "Category not found");
            }
            
            
        } catch (Exception e) {
             AlertMessage.getInstance().printMessage("Category:selectItemFromTable Error"+e.getMessage());
           // AlertMessage.getInstance().showDialog(this, "MemberView:selectItemFromTable Error "+e.getMessage());
        }
    }

    private void deleteCategory() {
    
             try {

            
                    if(CategoryController.getInstance().delete(selectCategoryId).equals(EnumContainer.databaseDateStatus.SUCCESS.getValue())){
                AlertMessage.getInstance().showDialog(this, "updated Category ");
                loadItemTable();
                cleanTextField();
            }else{
                   AlertMessage.getInstance().showDialog(this, "failed to delete");
            }
           
            
            
            
        } catch (Exception e) {
            
            AlertMessage.getInstance().printMessage("Category  deleteCategory eror 1"+e.getMessage());
        }
    
    }
  private void cleanTextField(){
         CommandUIMethods.getInstance().cleanTextField(txtf_name);
    }
}

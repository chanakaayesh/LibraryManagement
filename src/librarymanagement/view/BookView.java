/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package librarymanagement.view;

import java.util.List;
import javax.swing.table.DefaultTableModel;
import librarymanagement.alert.AlertMessage;
import librarymanagement.commmonUiMethods.CommandUIMethods;
import librarymanagement.contoller.BookController;
import librarymanagement.contoller.CategoryController;
import librarymanagement.dto.BookCategoryDto;
import librarymanagement.dto.BookDto;
import librarymanagement.enumContainer.EnumContainer;

/**
 *
 * @author ayesh
 */
public class BookView extends javax.swing.JPanel {

    /**
     * Creates new form BookView
     */
    
    private int bookSerial =0;
    private String bookId ="";
    public BookView() {
        initComponents();
        
        addedValueForCategoyDropDown();
        loadItemTable() ;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jp_mainPanel = new javax.swing.JPanel();
        cb_category = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        txtf_author = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        txtf_bookTitle = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        txtf_date = new javax.swing.JTextField();
        btn_save = new javax.swing.JButton();
        btn_update = new javax.swing.JButton();
        btn_delete = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tbl_book = new javax.swing.JTable();
        txtf_bookQty = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();

        jLabel1.setBackground(new java.awt.Color(204, 255, 255));
        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("BooK");

        jp_mainPanel.setBackground(new java.awt.Color(204, 255, 255));

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Author");

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("Category");

        jLabel4.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText("Published Date");

        jLabel5.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel5.setText("book Title ");

        btn_save.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btn_save.setText("Save");
        btn_save.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_saveActionPerformed(evt);
            }
        });

        btn_update.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btn_update.setText("Update");
        btn_update.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_updateActionPerformed(evt);
            }
        });

        btn_delete.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btn_delete.setText("Delete");
        btn_delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_deleteActionPerformed(evt);
            }
        });

        tbl_book.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tbl_book.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tbl_bookMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tbl_book);

        jLabel6.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel6.setText("Quantity");

        jLabel7.setForeground(new java.awt.Color(102, 102, 102));
        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel7.setText("yyyy-MM-dd ");

        javax.swing.GroupLayout jp_mainPanelLayout = new javax.swing.GroupLayout(jp_mainPanel);
        jp_mainPanel.setLayout(jp_mainPanelLayout);
        jp_mainPanelLayout.setHorizontalGroup(
            jp_mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jp_mainPanelLayout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(jp_mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 599, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jp_mainPanelLayout.createSequentialGroup()
                        .addGroup(jp_mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jp_mainPanelLayout.createSequentialGroup()
                                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(cb_category, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jp_mainPanelLayout.createSequentialGroup()
                                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jp_mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtf_bookTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(btn_save, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGroup(jp_mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jp_mainPanelLayout.createSequentialGroup()
                                .addGap(40, 40, 40)
                                .addGroup(jp_mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jp_mainPanelLayout.createSequentialGroup()
                                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(45, 45, 45)
                                        .addComponent(txtf_author, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jp_mainPanelLayout.createSequentialGroup()
                                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(jp_mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(txtf_date, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                            .addGroup(jp_mainPanelLayout.createSequentialGroup()
                                .addGap(20, 20, 20)
                                .addComponent(btn_update, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(32, 32, 32)
                                .addComponent(btn_delete, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(jp_mainPanelLayout.createSequentialGroup()
                        .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtf_bookQty, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(23, Short.MAX_VALUE))
        );
        jp_mainPanelLayout.setVerticalGroup(
            jp_mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jp_mainPanelLayout.createSequentialGroup()
                .addGap(53, 53, 53)
                .addGroup(jp_mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(cb_category, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(txtf_author, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jp_mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(txtf_bookTitle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5)
                    .addComponent(txtf_date, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(jp_mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jp_mainPanelLayout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addGroup(jp_mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtf_bookQty, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel6)))
                    .addGroup(jp_mainPanelLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel7)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 28, Short.MAX_VALUE)
                .addGroup(jp_mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btn_update)
                    .addComponent(btn_save)
                    .addComponent(btn_delete))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 358, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(39, 39, 39))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(jp_mainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jp_mainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btn_saveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_saveActionPerformed
        // TODO add your handling code here:
        saveBook();
    }//GEN-LAST:event_btn_saveActionPerformed

    private void btn_updateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_updateActionPerformed
        // TODO add your handling code here:
        updateBook();
    }//GEN-LAST:event_btn_updateActionPerformed

    private void btn_deleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_deleteActionPerformed
        // TODO add your handling code here:
        deleteBook();
    }//GEN-LAST:event_btn_deleteActionPerformed

    private void tbl_bookMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tbl_bookMouseClicked
        // TODO add your handling code here:
        selectItemFromTable();
    }//GEN-LAST:event_tbl_bookMouseClicked


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_delete;
    private javax.swing.JButton btn_save;
    private javax.swing.JButton btn_update;
    private javax.swing.JComboBox<String> cb_category;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPanel jp_mainPanel;
    private javax.swing.JTable tbl_book;
    private javax.swing.JTextField txtf_author;
    private javax.swing.JTextField txtf_bookQty;
    private javax.swing.JTextField txtf_bookTitle;
    private javax.swing.JTextField txtf_date;
    // End of variables declaration//GEN-END:variables

    private void addedValueForCategoyDropDown() {
    
        try {
            
            List<BookCategoryDto> categoryList = CategoryController.getInstance().getCategoryList();
            
            if(!categoryList.isEmpty() && categoryList !=null){
                
                for(BookCategoryDto dto : categoryList){
                cb_category.addItem(dto.getCategoryName());
                }
                
            }else{
                 cb_category.addItem("");
            }
            
            
           
            
        } catch (Exception e) {
            
            AlertMessage.getInstance().printMessage("BookView:addedValueForCategoyDropDown "+e.getMessage());
        }
    
    }
     private void cleanTextField(){
         CommandUIMethods.getInstance().cleanTextField(txtf_author,txtf_author,txtf_bookTitle,txtf_date,txtf_bookQty);
    }
     
     private void loadItemTable() {
   
         try {
            
            String column[] = {"Serial no","Book Id"," Category Name","Author","Book Title","Publish Date","Quentity"};
            
            DefaultTableModel dta = new DefaultTableModel(column,0){
            
                @Override
                public boolean isCellEditable(int row, int column){
                
                    return false;
                }
            };
            
            tbl_book.setModel(dta);
           // int ItemDto
            
            List<BookDto> bookList;
            
            bookList =BookController.getInstance().getBookList();
            if(bookList !=null){
             for(BookDto dto : bookList){
                 if(dto !=null){
                 
                       Object[] rowdata ={dto.getSerialNumber(),dto.getBookId(),dto.getCategoryId(),
                           dto.getAuthor(),dto.getBookTitle(),dto.getPublishDate(),dto.getItemQuantity()
                       };
                
                       dta.addRow(rowdata);
              
               
                 }
            
              
               
            }
            }
            
              
        } catch (Exception e) {
           
                AlertMessage.getInstance().printMessage("BookView loadItemTable eror 1"+e.getMessage());
        }
    }

    private void saveBook() {
   
        try {
            BookDto bookdto =new BookDto(0,"", cb_category.getSelectedItem().toString(),
                    txtf_author.getText(), txtf_bookTitle.getText(),CommandUIMethods.getInstance().getStringToDate(txtf_date.getText()), Integer.parseInt(txtf_bookQty.getText()));
            
              AlertMessage.getInstance().printMessage("BookView saveBook book is "+bookdto);
            
            if(BookController.getInstance().save(bookdto).equals(EnumContainer.databaseDateStatus.SUCCESS.getValue())){
                    AlertMessage.getInstance().showDialog(this, "book added");
                    loadItemTable();
                    cleanTextField();
            }else{
                AlertMessage.getInstance().showDialog(this, "book adding failed");
        }
        } catch (Exception e) {
             AlertMessage.getInstance().showDialog(this, "book adding failed");
            AlertMessage.getInstance().printMessage("BookView saveBook eror 1"+e.getMessage());
        }
    }
    
    private void selectItemFromTable() {
    
        try {
            
             String bId = tbl_book.getValueAt(tbl_book.getSelectedRow(), 1).toString();
           // ItemDto itemDto = itemController.getById(itemId);
            
      
            BookDto bookDto = BookController.getInstance().getbookById(bId);
          
            if(bookDto !=null){
               
               bookSerial =bookDto.getSerialNumber();
               bookId     =bookDto.getBookId();
               
                txtf_author.setText(bookDto.getAuthor());
                txtf_bookQty.setText(String.valueOf(bookDto.getItemQuantity()));
                txtf_bookTitle.setText(bookDto.getBookTitle());
                txtf_date.setText(CommandUIMethods.getInstance().getToDateString(bookDto.getPublishDate()));
             
                
            }else{
            AlertMessage.getInstance().showDialog(this, "BookView not found");
            }
            
            
        } catch (Exception e) {
             AlertMessage.getInstance().printMessage("BookView:selectItemFromTable Error"+e.getMessage());
           // AlertMessage.getInstance().showDialog(this, "MemberView:selectItemFromTable Error "+e.getMessage());
        }
    }

    private void updateBook() {
        boolean isTextfieldEmty =checkTextFieldEmpty("red");
        
       
        try {
            
             if(!isTextfieldEmty){
                     BookDto bookdto =new BookDto(bookSerial,bookId, cb_category.getSelectedItem().toString(),
                    txtf_author.getText(), txtf_bookTitle.getText(),CommandUIMethods.getInstance().getStringToDate(txtf_date.getText()), Integer.parseInt(txtf_bookQty.getText()));
                       AlertMessage.getInstance().printMessage("BookView:updateBook bookdto"+bookdto);
            if(BookController.getInstance().update(bookdto).equals(EnumContainer.databaseDateStatus.SUCCESS.getValue())){
                AlertMessage.getInstance().showDialog(this, "book updated");
                  loadItemTable();
                    cleanTextField();
                    //clear read border Textfield
                    checkTextFieldEmpty("gray");
                    
            }else{
                AlertMessage.getInstance().showDialog(this, "updating fail");
            }
            
              }else{
                AlertMessage.getInstance().showDialog(this, "fill all textfield");
            }
            
             
        } catch (Exception e) {
             AlertMessage.getInstance().printMessage("BookView:updateBook Error"+e.getMessage());
        }
    }
    private boolean checkTextFieldEmpty(String color){
        return CommandUIMethods.getInstance().checkAllTextFieldIsfilled(color,txtf_bookTitle, txtf_author,
               txtf_bookTitle,txtf_date,txtf_bookQty );
    }

    private void deleteBook() {
   
        try {
            
            if(BookController.getInstance().delete(bookId).equals(EnumContainer.databaseDateStatus.SUCCESS.getValue())){
             AlertMessage.getInstance().showDialog(this, "book deleted");
                  loadItemTable();
                    cleanTextField();
                    //clear read border Textfield
                    checkTextFieldEmpty("gray");
            }else{
                AlertMessage.getInstance().showDialog(this, "unable to delete");
            }        
        } catch (Exception e) {
            
           AlertMessage.getInstance().printMessage("BookView:deletebook : error"+e.getMessage());
        }
    }
    
    
}
